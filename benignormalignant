import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import glob
import os
import shutil
import math
import imutils
import cv2

# count the number of images in the repective classes

ROOT_DIR = '/content/timer data set'

num_of_images = {}

for dir in os.listdir(ROOT_DIR):
    num_of_images[dir]=len(os.listdir(os.path.join(ROOT_DIR, dir)))
    
num_of_images   


# We create a training folder

if not os.path.exists('./train'):
    os.mkdir('./train')
    
    for dir in os.listdir(ROOT_DIR):
        os.makedir('.train/'+dir)
        for img in np.random.choice(a=os.listdir(os.path.join(ROOT_DIR, dir)),
                                   size= (math.floor(79/100*num_of_images[dir]-5), replace=False):
                                    
          O = os.path.join(ROOT_DIR,dir,img)
          D = os.path.join('./train', dir)
          shutil.copy(O,D)
          os.remove(O)
                                    
else:
  print('train Folder exists') 
  
# we create a validation folder

if not os.path.exists('./val'):
    os.mkdir('./val')
    
    for dir in os.listdir(ROOT_DIR):
        os.makedir('.train/'+dir)
        for img in np.random.choice(a=os.listdir(os.path.join(ROOT_DIR, dir)),
                                   size= (math.floor(15/100*num_of_images[dir]-5), replace=False):
                                    
          O = os.path.join(ROOT_DIR,dir,img)
          D = os.path.join('./train', dir)
          shutil.copy(O,D)
          os.remove(O)
                                    
else:
    print('val Folder exists')
    
    
# we create a test folder

if not os.path.exists('./test'):
    os.mkdir('./test')
    
    for dir in os.listdir(ROOT_DIR):
        os.makedir('.test/'+dir)
        for img in np.random.choice(a=os.listdir(os.path.join(ROOT_DIR, dir)),
                                   size= (math.floor(15/100*num_of_images[dir]-5), replace=False):
                                    
          O = os.path.join(ROOT_DIR,dir,img)
          D = os.path.join('./test', dir)
          shutil.copy(O,D)
          os.remove(O)
                                    
else:
    print('test Folder exists')
  
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import keras.layers import Dense, Conv2D, Flatten, MaxPool2D, Dropout, BatchNormalisation, MaxPooling2D, GlobalAvgPool2D
import keras.models import Sequential
import keras.preprocessing import image
import keras


# cnn model

model = Sequential()
model.add(Conv2D(filters=16, kernel_size=(3,3), activation='relu', input_shape=(224, 224,3)
                ))

model.add(Conv2D(filters=32, kernel_size=(3,3), activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters=64, kernel_size=(3,3), activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters=128, kernel_size=(3,3), activation='relu'))
model.add(Maxpool2D(pool_size=(2,2)))

model.add(Dropout(rate=0.25))

model.add(Flatten())
model.add(Dense(units=64, activation= 'relu'))
model.add(Dropout(rate=0.25))
model.add(Dense(units=1, activation=sigmoid))

model.compile(loss= keras.loses.binary_crossentropy, optimizers='adam', metrics=['accuracy'])

model.summary()
  
  
train_datagen = image.ImageDataGenerator(
        zoom_range = 0.2, shear_range = 0.2, rescale = 1./255, horizontal_flip = True)

val_datagen  = image.ImageDataGenerator(rescale = 1./255)

test_datagen = image.ImageDataGenerator(rescale = 1./255)
  
  
train_data = train_datagen.flow_from_directory(directory = '/content/train', target_size = (224,224), batch_size=32,
                                              class_mode='binary',)  
  
  
  
# having early stopping and model check point

from keras.callback import ModelCheckpoint, EarlyStopping

# early stopping
es = EarlyStopping(monitor = 'val_accuracy', min_delta = 0.01, patience = 5, verbose = 1, mode = 'auto')

# model check point
mc = ModelCheckpoint(filepath='best_model.h5', monitor= 'val_accuracy', verbose = 1, save_best_only = True, mode='auto')

# putting callback in a list
call_back = [es, mc]
  
  
hist = model.fit_generator(generator=train_data,
                          steps_per_epoch=8,
                          epochs = 30, verbose =1,
                          validation_data = val_data,
                          validation_steps=16,
                          callbacks=call_back)  
  
  
  
#Loading best fit model

from keras.models import load_model

model = load_model('/content/best_model.h5')  
  
# Model Accuracy

acc = model.evaluate_generator(generator = test_data)[1]

print(f'The accuracy of your model is = {acc*100}%')
  
h = hist.history
h.keys()
  
plt.plot(h['accuracy'])
plt.plot(h['val_accuracy'], c = 'red')
plt.title('acc vs v-loss')
plt.show() 


plt.plot(h['loss'])
plt.plot(h['val_loss'], c = 'red')
plt.title('loss vs v-loss')
plt.show()
  

# path for the image to see if it predicts correct class

path = '/content/val/Healthy/Not cancer (1768).jpg'
img = image.load_img(path, target_size = (224, 224),)

i = image.img_to_array(img)/255
input_arr = np.array([i])
input_arr.shape

pred = model.predict_classes(input_err)[0][0]


if pred == 0:
    print('The MRI image is of Brain Tumor')
esle:
    print('The MRI image is of Healthy brain')
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
